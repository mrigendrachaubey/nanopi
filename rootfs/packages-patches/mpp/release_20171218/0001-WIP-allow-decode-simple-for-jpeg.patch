From 39ae7b240e44eafebd80ce0367c04fd43e30d1b5 Mon Sep 17 00:00:00 2001
From: Jacob Chen <jacob2.chen@rock-chips.com>
Date: Thu, 25 May 2017 16:08:48 +0800
Subject: [PATCH 1/4] WIP: allow decode simple for jpeg

Signed-off-by: Jacob Chen <jacob2.chen@rock-chips.com>
---
 inc/rk_mpi_cmd.h                  | 14 ++++++--
 mpp/codec/dec/jpeg/jpegd_parser.c |  5 ++-
 mpp/codec/mpp_dec.cpp             |  7 ++++
 mpp/inc/mpp.h                     |  1 +
 mpp/mpp.cpp                       | 76 ++++++++++++++++++++++++---------------
 5 files changed, 71 insertions(+), 32 deletions(-)

diff --git a/inc/rk_mpi_cmd.h b/inc/rk_mpi_cmd.h
index 0ac86a2..e53e865 100644
--- a/inc/rk_mpi_cmd.h
+++ b/inc/rk_mpi_cmd.h
@@ -37,6 +37,13 @@
 #define CMD_CTX_ID_ISP                  (0x00030000)
 #define CMD_ID_MASK                     (0x0000FFFF)
 
+typedef enum MppIOMode_e {
+    MPP_IO_MODE_DEFAULT                 = -1,
+    MPP_IO_MODE_SIMPLE                  = 0,
+    MPP_IO_MODE_ADVANCED                = 1,
+    MPP_IO_MODE_BUTT,
+} MppIOMode;
+
 #define MPP_ENC_OSD_PLT_WHITE           ((255<<24)|(128<<16)|(128<<8)|235)
 #define MPP_ENC_OSD_PLT_YELLOW          ((255<<24)|(146<<16)|( 16<<8 )|210)
 #define MPP_ENC_OSD_PLT_CYAN            ((255<<24)|( 16<<16 )|(166<<8)|170)
@@ -46,19 +53,19 @@
 #define MPP_ENC_OSD_PLT_BLUE            ((255<<24)|(110<<16)|(240<<8)|41)
 #define MPP_ENC_OSD_PLT_BLACK           ((255<<24)|(128<<16)|(128<<8)|16)
 
-typedef enum MppEncSeiMode_t {
+typedef enum MppEncSeiMode_e {
     MPP_ENC_SEI_MODE_DISABLE,                /* default mode, SEI writing is disabled */
     MPP_ENC_SEI_MODE_ONE_SEQ,                /* one sequence has only one SEI */
     MPP_ENC_SEI_MODE_ONE_FRAME               /* one frame may have one SEI, if SEI info has changed */
 } MppEncSeiMode;
 
-typedef enum MppEncRcMode_t {
+typedef enum MppEncRcMode_e {
     MPP_ENC_RC_MODE_VBR,
     MPP_ENC_RC_MODE_CBR,
     MPP_ENC_RC_MODE_BUTT
 } MppEncRcMode;
 
-typedef enum MppEncRcQuality_t {
+typedef enum MppEncRcQuality_e {
     MPP_ENC_RC_QUALITY_WORST,
     MPP_ENC_RC_QUALITY_WORSE,
     MPP_ENC_RC_QUALITY_MEDIUM,
@@ -79,6 +86,7 @@ typedef enum {
     MPP_SET_INTPUT_BLOCK_TIMEOUT,
     MPP_SET_OUTPUT_BLOCK,
     MPP_SET_OUTPUT_BLOCK_TIMEOUT,
+    MPP_SET_TRANSACTION_MODE,           /* Need to setup before init */
     MPP_CMD_END,
 
     MPP_CODEC_CMD_BASE                  = CMD_MODULE_CODEC,
diff --git a/mpp/codec/dec/jpeg/jpegd_parser.c b/mpp/codec/dec/jpeg/jpegd_parser.c
index 3be4184..270e716 100644
--- a/mpp/codec/dec/jpeg/jpegd_parser.c
+++ b/mpp/codec/dec/jpeg/jpegd_parser.c
@@ -1177,6 +1177,9 @@ static MPP_RET jpegd_update_frame(JpegdCtx *ctx)
 {
     jpegd_dbg_func("enter\n");
 
+    mpp_buf_slot_set_flag(ctx->frame_slots, ctx->frame_slot_index, SLOT_QUEUE_USE);
+    mpp_buf_slot_enqueue(ctx->frame_slots, ctx->frame_slot_index, QUEUE_DISPLAY);
+
     mpp_buf_slot_clr_flag(ctx->frame_slots, ctx->frame_slot_index,
                           SLOT_CODEC_USE);
     ctx->frame_slot_index = -1;
@@ -1282,7 +1285,7 @@ static MPP_RET jpegd_init(void *ctx, ParserCfg *parser_cfg)
     JpegCtx->frame_slots = parser_cfg->frame_slots;
     JpegCtx->packet_slots = parser_cfg->packet_slots;
     JpegCtx->frame_slot_index = -1;
-    mpp_buf_slot_setup(JpegCtx->frame_slots, 1);
+    mpp_buf_slot_setup(JpegCtx->frame_slots, 3);
 
     JpegCtx->recv_buffer = mpp_calloc(RK_U8, JPEGD_STREAM_BUFF_SIZE);
     if (NULL == JpegCtx->recv_buffer) {
diff --git a/mpp/codec/mpp_dec.cpp b/mpp/codec/mpp_dec.cpp
index 2bf392e..ec6c67c 100644
--- a/mpp/codec/mpp_dec.cpp
+++ b/mpp/codec/mpp_dec.cpp
@@ -764,6 +764,13 @@ void *mpp_dec_advanced_thread(void *data)
     while (1) {
         {
             AutoMutex autolock(thd_dec->mutex());
+            {
+                AutoMutex autolock_reset(thd_dec->mutex(THREAD_RESET));
+                if (dec->reset_flag) {
+                    dec->reset_flag = 0;
+                    thd_dec->signal(THREAD_RESET);
+                }
+            }
             if (MPP_THREAD_RUNNING == thd_dec->get_status()) {
                 ret = mpp_port_dequeue(input, &mpp_task);
                 if (ret || NULL == mpp_task) {
diff --git a/mpp/inc/mpp.h b/mpp/inc/mpp.h
index 59c6577..74a296a 100644
--- a/mpp/inc/mpp.h
+++ b/mpp/inc/mpp.h
@@ -113,6 +113,7 @@ public:
     MppPollType     mInputBlock;
     MppPollType     mOutputBlock;
     RK_S64          mOutputBlockTimeout;
+    MppIOMode       mIOMode;
     /*
      * There are two threads for each decoder/encoder: codec thread and hal thread
      *
diff --git a/mpp/mpp.cpp b/mpp/mpp.cpp
index 0790f06..d004b32 100644
--- a/mpp/mpp.cpp
+++ b/mpp/mpp.cpp
@@ -54,6 +54,7 @@ Mpp::Mpp()
       mInputBlock(MPP_POLL_NON_BLOCK),
       mOutputBlock(MPP_POLL_NON_BLOCK),
       mOutputBlockTimeout(-1),
+      mIOMode(MPP_IO_MODE_DEFAULT),
       mThreadCodec(NULL),
       mThreadHal(NULL),
       mDec(NULL),
@@ -93,9 +94,14 @@ MPP_RET Mpp::init(MppCtxType type, MppCodingType coding)
         };
         mpp_dec_init(&mDec, &cfg);
 
-        if (mCoding != MPP_VIDEO_CodingMJPEG) {
+        if (mIOMode == MPP_IO_MODE_DEFAULT) {
+            mIOMode = (mCoding != MPP_VIDEO_CodingMJPEG) ?
+                      (MPP_IO_MODE_SIMPLE) : (MPP_IO_MODE_ADVANCED);
+        }
+
+        if (mIOMode == MPP_IO_MODE_SIMPLE) {
             mThreadCodec = new MppThread(mpp_dec_parser_thread, this, "mpp_dec_parser");
-            mThreadHal  = new MppThread(mpp_dec_hal_thread, this, "mpp_dec_hal");
+            mThreadHal = new MppThread(mpp_dec_hal_thread, this, "mpp_dec_hal");
 
             mpp_buffer_group_get_internal(&mPacketGroup, MPP_BUFFER_TYPE_ION);
             mpp_buffer_group_limit_config(mPacketGroup, 0, 3);
@@ -112,6 +118,19 @@ MPP_RET Mpp::init(MppCtxType type, MppCodingType coding)
             mpp_task_queue_setup(mInputTaskQueue, 1);
             mpp_task_queue_setup(mOutputTaskQueue, 1);
         }
+
+        mInputPort  = mpp_task_queue_get_port(mInputTaskQueue,  MPP_PORT_INPUT);
+        mOutputPort = mpp_task_queue_get_port(mOutputTaskQueue, MPP_PORT_OUTPUT);
+
+        if (mFrames && mPackets && (mDec) && mThreadCodec) {
+            if ((mIOMode == MPP_IO_MODE_SIMPLE && mThreadHal && mPacketGroup) ||
+                (mIOMode == MPP_IO_MODE_ADVANCED)) {
+                mThreadCodec->start();
+                if (mThreadHal)
+                    mThreadHal->start();
+                mInitDone = 1;
+            }
+        }
     } break;
     case MPP_CTX_ENC : {
         mFrames     = new mpp_list((node_destructor)NULL);
@@ -119,6 +138,8 @@ MPP_RET Mpp::init(MppCtxType type, MppCodingType coding)
         mTasks      = new mpp_list((node_destructor)NULL);
 
         mpp_enc_init(&mEnc, coding);
+
+        mIOMode = MPP_IO_MODE_ADVANCED;
         mThreadCodec = new MppThread(mpp_enc_control_thread, this, "mpp_enc_ctrl");
         //mThreadHal  = new MppThread(mpp_enc_hal_thread, this, "mpp_enc_hal");
 
@@ -129,37 +150,22 @@ MPP_RET Mpp::init(MppCtxType type, MppCodingType coding)
         mpp_task_queue_init(&mOutputTaskQueue);
         mpp_task_queue_setup(mInputTaskQueue, 1);
         mpp_task_queue_setup(mOutputTaskQueue, 1);
+
+        mInputPort  = mpp_task_queue_get_port(mInputTaskQueue,  MPP_PORT_INPUT);
+        mOutputPort = mpp_task_queue_get_port(mOutputTaskQueue, MPP_PORT_OUTPUT);
+
+        if (mFrames && mPackets && (mEnc) && mThreadCodec && mPacketGroup) {
+            mThreadCodec->start();
+            //mThreadHal->start();  // TODO
+            mInitDone = 1;
+        }
     } break;
     default : {
         mpp_err("Mpp error type %d\n", mType);
     } break;
     }
 
-    mInputPort  = mpp_task_queue_get_port(mInputTaskQueue,  MPP_PORT_INPUT);
-    mOutputPort = mpp_task_queue_get_port(mOutputTaskQueue, MPP_PORT_OUTPUT);
-
-    if (mCoding == MPP_VIDEO_CodingMJPEG &&
-        mFrames && mPackets &&
-        (mDec) &&
-        mThreadCodec/* &&
-        mPacketGroup*/) {
-        mThreadCodec->start();
-        mInitDone = 1;
-    } else if (mFrames && mPackets &&
-               (mDec) &&
-               mThreadCodec && mThreadHal &&
-               mPacketGroup) {
-        mThreadCodec->start();
-        mThreadHal->start();
-        mInitDone = 1;
-    } else if (mFrames && mPackets &&
-               (mEnc) &&
-               mThreadCodec/* && mThreadHal */ &&
-               mPacketGroup) {
-        mThreadCodec->start();
-        //mThreadHal->start();  // TODO
-        mInitDone = 1;
-    } else {
+    if (!mInitDone) {
         mpp_err("error found on mpp initialization\n");
         clear();
     }
@@ -613,7 +619,7 @@ MPP_RET Mpp::reset()
     if (mType == MPP_CTX_DEC) {
         mpp_dec_reset(mDec);
 
-        if (mDec->coding != MPP_VIDEO_CodingMJPEG) {
+        if (mIOMode != MPP_IO_MODE_ADVANCED) {
             mThreadCodec->lock();
             mThreadCodec->signal();
             mThreadCodec->unlock();
@@ -654,6 +660,20 @@ MPP_RET Mpp::control_mpp(MpiCmd cmd, MppParam param)
     case MPP_SET_OUTPUT_BLOCK_TIMEOUT: {
         mOutputBlockTimeout = *((RK_S64 *)param);
     } break;
+    case MPP_SET_TRANSACTION_MODE: {
+        /*
+         * Mpp context input/output mode:
+         * -1 : default
+         *  0 : force simple mode, create simple worker thread
+         *  1 : force advanced mode, create advanced workder thread
+         */
+        MppIOMode mode = *((MppIOMode *)param);
+        if (mode > MPP_IO_MODE_BUTT || mode < MPP_IO_MODE_DEFAULT) {
+            mpp_err("invalid transaction mode %d\n", mode);
+            mode = MPP_IO_MODE_DEFAULT;
+        }
+        mIOMode = mode;
+    } break;
     default : {
         ret = MPP_NOK;
     } break;
-- 
2.15.1

