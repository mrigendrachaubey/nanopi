From b57908d1e977ac84f43869800b316634c23bdc7e Mon Sep 17 00:00:00 2001
From: Maksim Sisov <msisov@igalia.com>
Date: Tue, 26 Mar 2019 22:12:18 +0000
Subject: [PATCH 6/7] ozone: Allow running presentation feedback any time after
 swap ack.

The previous limitation is artificial and blocks Wayland
from correct behaviour.

The presentation and swap completion callbacks come completely
independently in case of Wayland, and blocking swap completion callback
until presentation callback come adds an artificial delay to
the display compositor as long as it's not known when the pixel
will be turned to light.

Thus, use local swap ids to allow the following order
Swap[0]
Swap-Ack[0]
Swap[1]
PresentationCallback[0]
Swap-Ack[1]
PresentationCallback[1]

Right now, it crashes because Swap[1] sets
allow_running_presentation_callback_ to false and the feedback
for the Swap[0] cannot go through.

To ensure that the presentation callback does not come earlier
than the swap-ack callback, implement a queue with local swap ids
to ensure 1) correct order of swap and swap-ack and ensure the
presentation callbacks do not run earlier than their preceeding
swap requests.

Bug: 943096
Change-Id: I0c399c6031991fd317484a8448228fe27ec69ded
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1533873
Reviewed-by: Antoine Labour <piman@chromium.org>
Commit-Queue: Maksim Sisov <msisov@igalia.com>
Cr-Commit-Position: refs/heads/master@{#644551}
---
 .../pass_through_image_transport_surface.cc        | 81 +++++++++++++++-------
 .../service/pass_through_image_transport_surface.h | 15 +++-
 2 files changed, 68 insertions(+), 28 deletions(-)

diff --git a/gpu/ipc/service/pass_through_image_transport_surface.cc b/gpu/ipc/service/pass_through_image_transport_surface.cc
index 6b1b9fc92..7ecdc0fc1 100644
--- a/gpu/ipc/service/pass_through_image_transport_surface.cc
+++ b/gpu/ipc/service/pass_through_image_transport_surface.cc
@@ -56,11 +56,11 @@ gfx::SwapResult PassThroughImageTransportSurface::SwapBuffers(
     PresentationCallback callback) {
   gfx::SwapResponse response;
   StartSwapBuffers(&response);
-  gfx::SwapResult result = gl::GLSurfaceAdapter::SwapBuffers(
-      base::BindOnce(&PassThroughImageTransportSurface::BufferPresented,
-                     weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
+  gfx::SwapResult result = gl::GLSurfaceAdapter::SwapBuffers(base::BindOnce(
+      &PassThroughImageTransportSurface::BufferPresented,
+      weak_ptr_factory_.GetWeakPtr(), std::move(callback), local_swap_id_));
   response.result = result;
-  FinishSwapBuffers(std::move(response));
+  FinishSwapBuffers(std::move(response), local_swap_id_);
   return result;
 }
 
@@ -77,10 +77,11 @@ void PassThroughImageTransportSurface::SwapBuffersAsync(
   gl::GLSurfaceAdapter::SwapBuffersAsync(
       base::BindOnce(&PassThroughImageTransportSurface::FinishSwapBuffersAsync,
                      weak_ptr_factory_.GetWeakPtr(),
-                     std::move(completion_callback), std::move(response)),
+                     std::move(completion_callback), std::move(response),
+                     local_swap_id_),
       base::BindOnce(&PassThroughImageTransportSurface::BufferPresented,
                      weak_ptr_factory_.GetWeakPtr(),
-                     std::move(presentation_callback)));
+                     std::move(presentation_callback), local_swap_id_));
 }
 
 gfx::SwapResult PassThroughImageTransportSurface::SwapBuffersWithBounds(
@@ -89,11 +90,11 @@ gfx::SwapResult PassThroughImageTransportSurface::SwapBuffersWithBounds(
   gfx::SwapResponse response;
   StartSwapBuffers(&response);
   gfx::SwapResult result = gl::GLSurfaceAdapter::SwapBuffersWithBounds(
-      rects,
-      base::BindOnce(&PassThroughImageTransportSurface::BufferPresented,
-                     weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
+      rects, base::BindOnce(&PassThroughImageTransportSurface::BufferPresented,
+                            weak_ptr_factory_.GetWeakPtr(), std::move(callback),
+                            local_swap_id_));
   response.result = result;
-  FinishSwapBuffers(std::move(response));
+  FinishSwapBuffers(std::move(response), local_swap_id_);
   return result;
 }
 
@@ -108,9 +109,10 @@ gfx::SwapResult PassThroughImageTransportSurface::PostSubBuffer(
   gfx::SwapResult result = gl::GLSurfaceAdapter::PostSubBuffer(
       x, y, width, height,
       base::BindOnce(&PassThroughImageTransportSurface::BufferPresented,
-                     weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
+                     weak_ptr_factory_.GetWeakPtr(), std::move(callback),
+                     local_swap_id_));
   response.result = result;
-  FinishSwapBuffers(std::move(response));
+  FinishSwapBuffers(std::move(response), local_swap_id_);
 
   return result;
 }
@@ -128,21 +130,23 @@ void PassThroughImageTransportSurface::PostSubBufferAsync(
       x, y, width, height,
       base::BindOnce(&PassThroughImageTransportSurface::FinishSwapBuffersAsync,
                      weak_ptr_factory_.GetWeakPtr(),
-                     std::move(completion_callback), std::move(response)),
+                     std::move(completion_callback), std::move(response),
+                     local_swap_id_),
       base::BindOnce(&PassThroughImageTransportSurface::BufferPresented,
                      weak_ptr_factory_.GetWeakPtr(),
-                     std::move(presentation_callback)));
+                     std::move(presentation_callback), local_swap_id_));
 }
 
 gfx::SwapResult PassThroughImageTransportSurface::CommitOverlayPlanes(
     PresentationCallback callback) {
   gfx::SwapResponse response;
   StartSwapBuffers(&response);
-  gfx::SwapResult result = gl::GLSurfaceAdapter::CommitOverlayPlanes(
-      base::BindOnce(&PassThroughImageTransportSurface::BufferPresented,
-                     weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
+  gfx::SwapResult result =
+      gl::GLSurfaceAdapter::CommitOverlayPlanes(base::BindOnce(
+          &PassThroughImageTransportSurface::BufferPresented,
+          weak_ptr_factory_.GetWeakPtr(), std::move(callback), local_swap_id_));
   response.result = result;
-  FinishSwapBuffers(std::move(response));
+  FinishSwapBuffers(std::move(response), local_swap_id_);
   return result;
 }
 
@@ -154,10 +158,10 @@ void PassThroughImageTransportSurface::CommitOverlayPlanesAsync(
   gl::GLSurfaceAdapter::CommitOverlayPlanesAsync(
       base::BindOnce(&PassThroughImageTransportSurface::FinishSwapBuffersAsync,
                      weak_ptr_factory_.GetWeakPtr(), std::move(callback),
-                     std::move(response)),
+                     std::move(response), local_swap_id_),
       base::BindOnce(&PassThroughImageTransportSurface::BufferPresented,
                      weak_ptr_factory_.GetWeakPtr(),
-                     std::move(presentation_callback)));
+                     std::move(presentation_callback), local_swap_id_));
 }
 
 void PassThroughImageTransportSurface::SetVSyncEnabled(bool enabled) {
@@ -203,29 +207,42 @@ void PassThroughImageTransportSurface::UpdateVSyncEnabled() {
 void PassThroughImageTransportSurface::StartSwapBuffers(
     gfx::SwapResponse* response) {
   UpdateVSyncEnabled();
-  allow_running_presentation_callback_ = false;
 
-  // Populated later in the DecoderClient, before passing to client.
+#if DCHECK_IS_ON()
+  // Store the local swap id to ensure the presentation callback is not called
+  // before this swap is completed.
+  pending_local_swap_ids_.push(++local_swap_id_);
+#endif
+  // Correct id will be populated later in the DecoderClient, before passing to
+  // client.
   response->swap_id = 0;
 
   response->swap_start = base::TimeTicks::Now();
 }
 
 void PassThroughImageTransportSurface::FinishSwapBuffers(
-    gfx::SwapResponse response) {
+    gfx::SwapResponse response,
+    uint64_t local_swap_id) {
   response.swap_end = base::TimeTicks::Now();
 
+#if DCHECK_IS_ON()
+  // After the swap is completed, the local swap id is removed from the queue,
+  // and the presentation callback for this swap can be run at any time later.
+  DCHECK_EQ(pending_local_swap_ids_.front(), local_swap_id);
+  pending_local_swap_ids_.pop();
+#endif
+
   if (delegate_) {
     SwapBuffersCompleteParams params;
     params.swap_response = std::move(response);
     delegate_->DidSwapBuffersComplete(std::move(params));
   }
-  allow_running_presentation_callback_ = true;
 }
 
 void PassThroughImageTransportSurface::FinishSwapBuffersAsync(
     SwapCompletionCallback callback,
     gfx::SwapResponse response,
+    uint64_t local_swap_id,
     gfx::SwapResult result,
     std::unique_ptr<gfx::GpuFence> gpu_fence) {
   // TODO(afrantzis): It's probably not ideal to introduce a wait here.
@@ -235,14 +252,26 @@ void PassThroughImageTransportSurface::FinishSwapBuffersAsync(
   if (gpu_fence)
     gpu_fence->Wait();
   response.result = result;
-  FinishSwapBuffers(std::move(response));
+  FinishSwapBuffers(std::move(response), local_swap_id);
   std::move(callback).Run(result, nullptr);
 }
 
 void PassThroughImageTransportSurface::BufferPresented(
     GLSurface::PresentationCallback callback,
+    uint64_t local_swap_id,
     const gfx::PresentationFeedback& feedback) {
-  DCHECK(allow_running_presentation_callback_);
+#if DCHECK_IS_ON()
+  // The swaps are handled in queue. Thus, to allow the presentation feedback to
+  // be called after the first swap ack later, disregarding any of the following
+  // swap requests with own presentation feedbacks, and disallow calling the
+  // presentation callback before the same swap request, make sure the queue is
+  // either empty or the pending swap id is greater than the current. This means
+  // that the requested swap is completed and it's safe to call the presentation
+  // callback.
+  DCHECK(pending_local_swap_ids_.empty() ||
+         pending_local_swap_ids_.front() > local_swap_id);
+#endif
+
   std::move(callback).Run(feedback);
   if (delegate_)
     delegate_->BufferPresented(feedback);
diff --git a/gpu/ipc/service/pass_through_image_transport_surface.h b/gpu/ipc/service/pass_through_image_transport_surface.h
index 8defdd047..0d1fb6016 100644
--- a/gpu/ipc/service/pass_through_image_transport_surface.h
+++ b/gpu/ipc/service/pass_through_image_transport_surface.h
@@ -10,6 +10,7 @@
 #include <memory>
 #include <vector>
 
+#include "base/containers/queue.h"
 #include "base/macros.h"
 #include "base/memory/weak_ptr.h"
 #include "gpu/ipc/service/image_transport_surface.h"
@@ -57,13 +58,15 @@ class PassThroughImageTransportSurface : public gl::GLSurfaceAdapter {
   void UpdateVSyncEnabled();
 
   void StartSwapBuffers(gfx::SwapResponse* response);
-  void FinishSwapBuffers(gfx::SwapResponse response);
+  void FinishSwapBuffers(gfx::SwapResponse response, uint64_t local_swap_id);
   void FinishSwapBuffersAsync(SwapCompletionCallback callback,
                               gfx::SwapResponse response,
+                              uint64_t local_swap_id,
                               gfx::SwapResult result,
                               std::unique_ptr<gfx::GpuFence> gpu_fence);
 
   void BufferPresented(PresentationCallback callback,
+                       uint64_t local_swap_id,
                        const gfx::PresentationFeedback& feedback);
 
   const bool is_gpu_vsync_disabled_;
@@ -71,7 +74,15 @@ class PassThroughImageTransportSurface : public gl::GLSurfaceAdapter {
   base::WeakPtr<ImageTransportSurfaceDelegate> delegate_;
   int swap_generation_ = 0;
   bool vsync_enabled_ = true;
-  bool allow_running_presentation_callback_ = true;
+
+  // Local swap ids, which are used to make sure the swap order is correct and
+  // the presentation callbacks are not called earlier than the swap ack of the
+  // same swap request. Checked only when DCHECK is on.
+  uint64_t local_swap_id_ = 0;
+
+#if DCHECK_IS_ON()
+  base::queue<uint64_t> pending_local_swap_ids_;
+#endif
 
   base::WeakPtrFactory<PassThroughImageTransportSurface> weak_ptr_factory_;
 
-- 
2.11.0

