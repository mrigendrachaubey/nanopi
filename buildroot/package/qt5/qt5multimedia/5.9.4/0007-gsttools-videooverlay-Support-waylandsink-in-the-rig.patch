From 3b55b6129516c4fedbcd5c7e4f1569074650d31f Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Wed, 28 Nov 2018 21:31:49 +0800
Subject: [PATCH 3/7] gsttools: videooverlay: Support waylandsink in the right
 way

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 src/gsttools/qgstreamervideooverlay.cpp            | 168 +++++++++++++++++----
 .../gsttools_headers/qgstreamervideooverlay_p.h    |   2 +
 2 files changed, 142 insertions(+), 28 deletions(-)

diff --git a/src/gsttools/qgstreamervideooverlay.cpp b/src/gsttools/qgstreamervideooverlay.cpp
index 6ad70fd..bd99abd 100644
--- a/src/gsttools/qgstreamervideooverlay.cpp
+++ b/src/gsttools/qgstreamervideooverlay.cpp
@@ -40,7 +40,11 @@
 #include "qgstreamervideooverlay_p.h"
 
 #include <QtGui/qguiapplication.h>
+#include <QtGui/qwindow.h>
+#include <QtGui/qpa/qplatformwindow.h>
+#include <QtGui/qpa/qplatformnativeinterface.h>
 #include "qgstutils_p.h"
+#include "qdebug.h"
 
 #if !GST_CHECK_VERSION(1,0,0)
 #include <gst/interfaces/xoverlay.h>
@@ -48,6 +52,10 @@
 #include <gst/video/videooverlay.h>
 #endif
 
+#ifdef ENABLE_WAYLAND_PLATFORM
+#include <wayland-client-protocol.h>
+#endif
+
 QT_BEGIN_NAMESPACE
 
 struct ElementMap
@@ -194,27 +202,112 @@ void QGstreamerVideoOverlay::setWindowHandle(WId id)
         setWindowHandle_helper(id);
 }
 
+static QWindow *findWindow(WId id) {
+    const auto allWindows = QGuiApplication::allWindows();
+    for (QWindow *window : allWindows)
+        if (window->winId() == id)
+            return window;
+
+    return NULL;
+}
+
+#ifdef ENABLE_WAYLAND_PLATFORM
+// See qt5wayland->qwaylandwindow.cpp
+static QPoint getDisplayPosition(QWindow *window)
+{
+    QPoint pos;
+
+    if (!window)
+        return pos;
+
+    bool decoration = false;
+    switch (window->type()) {
+        case Qt::Window:
+        case Qt::Widget:
+        case Qt::Dialog:
+        case Qt::Tool:
+        case Qt::Drawer:
+            decoration = true;
+            break;
+        default:
+            break;
+    }
+    if (window->flags() & Qt::FramelessWindowHint ||
+        window->windowState() == Qt::WindowFullScreen ||
+        window->flags() & Qt::BypassWindowManagerHint ||
+        window->parent())
+        decoration = false;
+
+    if (decoration) {
+        QMargins m = window->frameMargins();
+        return QPoint(m.left(), m.top());
+    }
+
+    return pos;
+}
+#endif
+
 void QGstreamerVideoOverlay::setWindowHandle_helper(WId id)
 {
-#if GST_CHECK_VERSION(1,0,0)
-    if (m_videoSink && GST_IS_VIDEO_OVERLAY(m_videoSink)) {
-        gst_video_overlay_set_window_handle(GST_VIDEO_OVERLAY(m_videoSink), id);
-#else
-    if (m_videoSink && GST_IS_X_OVERLAY(m_videoSink)) {
-# if GST_CHECK_VERSION(0,10,31)
-        gst_x_overlay_set_window_handle(GST_X_OVERLAY(m_videoSink), id);
-# else
-        gst_x_overlay_set_xwindow_id(GST_X_OVERLAY(m_videoSink), id);
-# endif
+#ifdef ENABLE_WAYLAND_PLATFORM
+    QPlatformNativeInterface *native =
+            QGuiApplication::platformNativeInterface();
+    wl_surface *surface = NULL;
+    wl_compositor *compositor = NULL;
 #endif
+    QWindow *window;
+    GstVideoOverlay *overlay;
 
-        // Properties need to be reset when changing the winId.
-        setAspectRatioMode(m_aspectRatioMode);
-        setBrightness(m_brightness);
-        setContrast(m_contrast);
-        setHue(m_hue);
-        setSaturation(m_saturation);
+#if !GST_CHECK_VERSION(1,0,0)
+    qWarning("Only support gstreamer-1.0\n");
+    goto out;
+#endif
+
+    if (!m_videoSink || !GST_IS_VIDEO_OVERLAY(m_videoSink))
+        goto out;
+
+    overlay = GST_VIDEO_OVERLAY(m_videoSink);
+
+    window = findWindow(id);
+    if (!window)
+        goto no_window;
+
+#ifdef ENABLE_WAYLAND_PLATFORM
+    if (native) {
+        surface = (wl_surface*) native->nativeResourceForWindow("surface", window);
+        compositor = (wl_compositor*) native->nativeResourceForWindow("compositor", window);
     }
+
+    // It's wayland platform, using wl_surface as window handle.
+    if (compositor) {
+        if (!surface) {
+            // There's no surface for overlay now.
+            gst_video_overlay_set_window_handle(overlay, 0);
+            goto out;
+        }
+
+        gst_video_overlay_set_window_handle(overlay, (WId) surface);
+
+        QPoint pos = getDisplayPosition(window);
+        gst_video_overlay_set_render_rectangle(overlay, pos.x() + m_rect.x(),
+                pos.y() + m_rect.y(), m_rect.width(), m_rect.height());
+        goto out;
+    }
+#endif // ENABLE_WAYLAND_PLATFORM
+
+    gst_video_overlay_set_window_handle(overlay, window->winId());
+
+no_window:
+    gst_video_overlay_set_render_rectangle(overlay, m_rect.x(), m_rect.y(),
+            m_rect.width(), m_rect.height());
+
+out:
+    // Properties need to be reset when changing the winId.
+    setAspectRatioMode(m_aspectRatioMode);
+    setBrightness(m_brightness);
+    setContrast(m_contrast);
+    setHue(m_hue);
+    setSaturation(m_saturation);
 }
 
 void QGstreamerVideoOverlay::expose()
@@ -246,24 +339,43 @@ void QGstreamerVideoOverlay::setRenderRectangle(const QRect &rect)
         h = rect.height();
     }
 
-#if GST_CHECK_VERSION(1,0,0)
-    if (m_videoSink && GST_IS_VIDEO_OVERLAY(m_videoSink))
-        gst_video_overlay_set_render_rectangle(GST_VIDEO_OVERLAY(m_videoSink), x, y, w, h);
-#elif GST_CHECK_VERSION(0, 10, 29)
-    if (m_videoSink && GST_IS_X_OVERLAY(m_videoSink))
-        gst_x_overlay_set_render_rectangle(GST_X_OVERLAY(m_videoSink), x, y , w , h);
-#else
-    Q_UNUSED(x)
-    Q_UNUSED(y)
-    Q_UNUSED(w)
-    Q_UNUSED(h)
-#endif
+    m_rect = QRect(x, y, w, h);
+
+    if (isActive())
+        setWindowHandle_helper(m_windowId);
 }
 
 bool QGstreamerVideoOverlay::processSyncMessage(const QGstreamerMessage &message)
 {
     GstMessage* gm = message.rawMessage();
 
+#if GST_CHECK_VERSION(1,0,0)
+
+#ifdef ENABLE_WAYLAND_PLATFORM
+#define GST_WAYLAND_DISPLAY_HANDLE_CONTEXT_TYPE "GstWaylandDisplayHandleContextType"
+    if (gm && (GST_MESSAGE_TYPE(gm) == GST_MESSAGE_NEED_CONTEXT)) {
+        const gchar *type = NULL;
+
+        if (gst_message_parse_context_type(gm, &type) &&
+                !g_strcmp0(type, GST_WAYLAND_DISPLAY_HANDLE_CONTEXT_TYPE)) {
+            GstContext *context =
+                gst_context_new(GST_WAYLAND_DISPLAY_HANDLE_CONTEXT_TYPE, TRUE);
+            QPlatformNativeInterface *native =
+                QGuiApplication::platformNativeInterface();
+            void *handle = NULL;
+
+            if (native)
+                handle = native->nativeResourceForWindow("display", NULL);
+
+            gst_structure_set(gst_context_writable_structure(context),
+                    "handle", G_TYPE_POINTER, handle, NULL);
+            gst_element_set_context(GST_ELEMENT(GST_MESSAGE_SRC(gm)), context);
+            return true;
+        }
+    }
+#endif
+#endif
+
 #if !GST_CHECK_VERSION(1,0,0)
     if (gm && (GST_MESSAGE_TYPE(gm) == GST_MESSAGE_ELEMENT) &&
             gst_structure_has_name(gm->structure, "prepare-xwindow-id")) {
diff --git a/src/multimedia/gsttools_headers/qgstreamervideooverlay_p.h b/src/multimedia/gsttools_headers/qgstreamervideooverlay_p.h
index f3066fa..6d8c0bc 100644
--- a/src/multimedia/gsttools_headers/qgstreamervideooverlay_p.h
+++ b/src/multimedia/gsttools_headers/qgstreamervideooverlay_p.h
@@ -54,6 +54,7 @@
 #include <private/qgstreamerbushelper_p.h>
 #include <private/qgstreamerbufferprobe_p.h>
 #include <QtGui/qwindowdefs.h>
+#include <QtCore/qrect.h>
 #include <QtCore/qsize.h>
 
 QT_BEGIN_NAMESPACE
@@ -124,6 +125,7 @@ private:
     bool m_hasShowPrerollFrame;
 
     WId m_windowId;
+    QRect m_rect;
     Qt::AspectRatioMode m_aspectRatioMode;
     int m_brightness;
     int m_contrast;
-- 
2.11.0

