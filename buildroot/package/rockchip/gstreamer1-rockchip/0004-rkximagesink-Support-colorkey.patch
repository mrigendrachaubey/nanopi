From add782bb91b9d18166272db6c601c5f6dcd34622 Mon Sep 17 00:00:00 2001
From: Jeffy Chen <jeffy.chen@rock-chips.com>
Date: Tue, 25 Jun 2019 19:05:17 +0800
Subject: [PATCH 4/4] rkximagesink: Support colorkey

Try to set colorkey on primary plane, then put target plane lower to
blend with primary plane.

Signed-off-by: Jeffy Chen <jeffy.chen@rock-chips.com>
---
 gst/rkximage/ximagesink.c | 159 ++++++++++++++++++++++++++++++++++++++++------
 gst/rkximage/ximagesink.h |   1 +
 2 files changed, 142 insertions(+), 18 deletions(-)

diff --git a/gst/rkximage/ximagesink.c b/gst/rkximage/ximagesink.c
index 668e6ed..94f9755 100644
--- a/gst/rkximage/ximagesink.c
+++ b/gst/rkximage/ximagesink.c
@@ -31,9 +31,17 @@
 #include "gstkmsbufferpool.h"
 #include "gstkmsallocator.h"
 
+/* A random dark color */
+#define RKXIMAGE_COLOR_KEY 0x010203
+
 GST_DEBUG_CATEGORY (gst_debug_x_image_sink);
 #define GST_CAT_DEFAULT gst_debug_x_image_sink
 
+#define EMPTY_RECT(r) !((r).x || (r).y || (r).w || (r).h)
+#define RECT_EQUAL(r1, r2) \
+    ((r1).x == (r2).x && (r1).y == (r2).y && \
+     (r1).w == (r2.w) && (r1).h == (r2).h)
+
 typedef struct
 {
   unsigned long flags;
@@ -104,10 +112,32 @@ G_DEFINE_TYPE_WITH_CODE (GstRkXImageSink, gst_x_image_sink, GST_TYPE_VIDEO_SINK,
 /* ============================================================= */
 /*drm*/
 
+static int
+drm_plane_get_type (int fd, drmModePlane * plane)
+{
+  drmModeObjectPropertiesPtr props;
+  drmModePropertyPtr prop;
+  int i, type = -1;
+
+  props = drmModeObjectGetProperties (fd, plane->plane_id,
+      DRM_MODE_OBJECT_PLANE);
+  if (!props)
+    return -1;
+
+  for (i = 0; i < props->count_props; i++) {
+    prop = drmModeGetProperty (fd, props->props[i]);
+    if (prop && !strcmp (prop->name, "type"))
+      type = props->prop_values[i];
+    drmModeFreeProperty (prop);
+  }
+
+  drmModeFreeObjectProperties (props);
+  return type;
+}
 
 static drmModePlane *
-drm_find_plane_for_crtc (int fd, drmModeRes * res, drmModePlaneRes * pres,
-    int crtc_id)
+drm_find_plane_for_crtc_by_type (int fd, drmModeRes * res,
+    drmModePlaneRes * pres, int crtc_id, int type)
 {
   drmModePlane *plane;
   int i, pipe;
@@ -126,8 +156,10 @@ drm_find_plane_for_crtc (int fd, drmModeRes * res, drmModePlaneRes * pres,
 
   for (i = 0; i < pres->count_planes; i++) {
     plane = drmModeGetPlane (fd, pres->planes[i]);
-    if (plane->possible_crtcs & (1 << pipe))
-      return plane;
+    if (plane->possible_crtcs & (1 << pipe)) {
+      if (drm_plane_get_type (fd, plane) == type)
+        return plane;
+    }
     drmModeFreePlane (plane);
   }
 
@@ -355,6 +387,73 @@ drm_ensure_allowed_caps (GstRkXImageSink * self, drmModePlane * plane,
   return TRUE;
 }
 
+static gboolean
+drm_plane_set_property (GstRkXImageSink * self, drmModePlane * plane,
+    const char *prop_name, uint64_t prop_value)
+{
+  drmModeObjectPropertiesPtr props;
+  drmModePropertyPtr prop;
+  int i, ret = -1;
+
+  props = drmModeObjectGetProperties (self->fd, plane->plane_id,
+      DRM_MODE_OBJECT_PLANE);
+  if (!props)
+    return FALSE;
+
+  for (i = 0; i < props->count_props; i++) {
+    prop = drmModeGetProperty (self->fd, props->props[i]);
+    if (prop && !strcmp (prop->name, prop_name)) {
+      ret = drmModeObjectSetProperty (self->fd, plane->plane_id,
+          DRM_MODE_OBJECT_PLANE, props->props[i], prop_value);
+    }
+    drmModeFreeProperty (prop);
+  }
+
+  drmModeFreeObjectProperties (props);
+  return ret < 0 ? FALSE : TRUE;
+}
+
+static gboolean
+drm_prepare_planes (GstRkXImageSink * self, drmModeRes * res,
+    drmModePlaneRes * pres)
+{
+  drmModePlane *plane;
+  gboolean ret = FALSE;
+
+  if (drmSetClientCap (self->fd, DRM_CLIENT_CAP_ATOMIC, 1))
+    return FALSE;
+
+  /* Apply colorkey to primary plane */
+  plane = drm_find_plane_for_crtc_by_type (self->fd, res, pres,
+      self->crtc_id, DRM_PLANE_TYPE_PRIMARY);
+  if (!plane)
+    return FALSE;
+
+  if (drm_plane_set_property (self, plane, "colorkey", RKXIMAGE_COLOR_KEY) < 0)
+    goto out;
+
+  GST_DEBUG_OBJECT (self, "applied colorkey = 0x%x to plane %d",
+      RKXIMAGE_COLOR_KEY, plane->plane_id);
+
+  drmModeFreePlane (plane);
+
+  /* Lower overlay plane */
+  plane = drmModeGetPlane (self->fd, self->plane_id);
+  if (!plane)
+    goto out;
+
+  if (drm_plane_set_property (self, plane, "ZPOS", 0) < 0)
+    goto out;
+
+  GST_DEBUG_OBJECT (self, "set plane %d zpos to 0", plane->plane_id);
+
+  ret = TRUE;
+
+out:
+  drmModeFreePlane (plane);
+  return ret;
+}
+
 /*kms*/
 static void
 ensure_kms_allocator (GstRkXImageSink * self)
@@ -794,6 +893,17 @@ xwindow_get_render_rectangle (GstRkXImageSink * ximagesink,
   }
 }
 
+static void
+gst_x_image_sink_xwindow_fill_key (GstRkXImageSink * ximagesink,
+    GstXWindow * xwindow, guint32 color)
+{
+  XSetForeground (ximagesink->xcontext->disp, xwindow->gc, color);
+  XFillRectangle (ximagesink->xcontext->disp, xwindow->win, xwindow->gc,
+      ximagesink->clip_rect.x, ximagesink->clip_rect.y,
+      ximagesink->clip_rect.x + ximagesink->clip_rect.w,
+      ximagesink->clip_rect.y + ximagesink->clip_rect.h);
+}
+
 /* We are called with the x_lock taken */
 static void
 gst_x_image_sink_xwindow_draw_borders (GstRkXImageSink * ximagesink,
@@ -895,6 +1005,17 @@ gst_x_image_sink_ximage_put (GstRkXImageSink * ximagesink, GstBuffer * buf)
 
   g_mutex_lock (&ximagesink->x_lock);
 
+  /* Fill color key when clip rect changed */
+  if (draw_border || !RECT_EQUAL (ximagesink->clip_rect, result)) {
+    ximagesink->clip_rect = result;
+    gst_x_image_sink_xwindow_fill_key (ximagesink,
+        ximagesink->xwindow, RKXIMAGE_COLOR_KEY);
+
+    /* Do an extra repaint when handing expose */
+    if (expose)
+      memset (&ximagesink->clip_rect, 0, sizeof (GstVideoRectangle));
+  }
+
   if (draw_border) {
     gst_x_image_sink_xwindow_draw_borders (ximagesink, ximagesink->xwindow,
         result);
@@ -2226,11 +2347,9 @@ gst_x_image_sink_start (GstBaseSink * bsink)
   drmModeCrtc *crtc;
   drmModePlaneRes *pres;
   drmModePlane *plane;
-  gboolean universal_planes;
   gboolean ret;
 
   self = GST_X_IMAGE_SINK (bsink);
-  universal_planes = FALSE;
   ret = FALSE;
   res = NULL;
   conn = NULL;
@@ -2262,9 +2381,7 @@ gst_x_image_sink_start (GstBaseSink * bsink)
   if (!crtc)
     goto crtc_failed;
 
-retry_find_plane:
-  if (universal_planes &&
-      drmSetClientCap (self->fd, DRM_CLIENT_CAP_UNIVERSAL_PLANES, 1))
+  if (drmSetClientCap (self->fd, DRM_CLIENT_CAP_UNIVERSAL_PLANES, 1))
     goto set_cap_failed;
 
   pres = drmModeGetPlaneResources (self->fd);
@@ -2272,9 +2389,15 @@ retry_find_plane:
     goto plane_resources_failed;
 
   if (self->plane_id == -1)
-    plane = drm_find_plane_for_crtc (self->fd, res, pres, crtc->crtc_id);
-  else
+    plane = drm_find_plane_for_crtc_by_type (self->fd, res, pres,
+        crtc->crtc_id, DRM_PLANE_TYPE_OVERLAY);
+  else {
     plane = drmModeGetPlane (self->fd, self->plane_id);
+    if (drm_plane_get_type (self->fd, plane) == DRM_PLANE_TYPE_PRIMARY) {
+      GST_ERROR_OBJECT (self, "Not support using primary plane");
+      goto bail;
+    }
+  }
   if (!plane)
     goto plane_failed;
 
@@ -2289,6 +2412,8 @@ retry_find_plane:
   GST_INFO_OBJECT (self, "connector id = %d / crtc id = %d / plane id = %d",
       self->conn_id, self->crtc_id, self->plane_id);
 
+  drm_prepare_planes (self, res, pres);
+
   self->hdisplay = crtc->mode.hdisplay;
   self->vdisplay = crtc->mode.vdisplay;
   self->buffer_id = crtc->buffer_id;
@@ -2365,13 +2490,8 @@ plane_resources_failed:
 
 plane_failed:
   {
-    if (universal_planes) {
-      GST_ERROR_OBJECT (self, "Could not find a plane for crtc");
-      goto bail;
-    } else {
-      universal_planes = TRUE;
-      goto retry_find_plane;
-    }
+    GST_ERROR_OBJECT (self, "Could not find a plane for crtc");
+    goto bail;
   }
 }
 
@@ -2382,6 +2502,9 @@ gst_x_image_sink_stop (GstBaseSink * bsink)
 
   self = GST_X_IMAGE_SINK (bsink);
 
+  if (!EMPTY_RECT (self->clip_rect))
+    gst_x_image_sink_xwindow_fill_key (self, self->xwindow, 0);
+
   gst_buffer_replace (&self->last_buffer, NULL);
   gst_caps_replace (&self->allowed_caps, NULL);
   gst_object_replace ((GstObject **) & self->pool, NULL);
diff --git a/gst/rkximage/ximagesink.h b/gst/rkximage/ximagesink.h
index 9075051..ddeec2a 100644
--- a/gst/rkximage/ximagesink.h
+++ b/gst/rkximage/ximagesink.h
@@ -146,6 +146,7 @@ struct _GstRkXImageSink
   GstXContext *xcontext;
   GstXWindow *xwindow;
   GstBuffer *cur_image;
+  GstVideoRectangle clip_rect;
 
   GThread *event_thread;
   gboolean running;
-- 
2.11.0

